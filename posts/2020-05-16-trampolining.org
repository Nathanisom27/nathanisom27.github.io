#+title: trampolining
#+pubdate: <2020-05-16>
#+draft: t

Most executable text files in Linux start with a shebang (=#!=) to tell the OS what program to run
the file with. What happens is a process is spawned with the program in the shebang, with the file
as the first argument. IE, when you call some file =/path/to/some/hello.sh=:

#+begin_src
#!/usr/bin/bash
echo "hello world!"
#+end_src

A process is created with the call structure =["/usr/bin/bash", "/path/to/some/hello.sh"]=

Notice I use the full path to bash here -- that is because this method needs the full path to the
program to run the script with. (that is =#!bash= doesn't work).

todo here: talk about limitation/only one argument can be passed to initial interpreter
mention /usr/bin/env <thing> for finding thing in path
mention it's easy to create your own interpreters (link to elisp and example script?)


** nix-shell multiline shebangs

# todo: fill in the comment

# The other day I learned from [[this comment ]]that nix-shell can contain a multiline shebang in which
# the interpreter AND dependencies are referenced from the current nixpkgs on the machine (though I'd
# bet there's a contained way to specify the nixpkgs you want as well):

#+begin_src
todo
#+end_src

** nix auto trampolining

I mentioned in my last post that an internet friend is trying to get the "most portable" $HOME. One
hack involved in this meant using the host libc so that openGL is feasible. todo tudu todo.....
