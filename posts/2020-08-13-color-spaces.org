#+title: reasoning about colors
#+pubdate: <2020-08-13>
#+draft: t

#+MACRO:  colorblock (eval (ns/blog-make-color-block $1 $2 $3))

#+BEGIN_SRC elisp :results raw :exports results
(let* ((word "ＡＥＳＴＨＥＴＩＣＳ")
       (colors
	(ns/color-gradient (length word)
			   (ht-get ns/theme :foreground)
			   (ht-get ns/theme :background)
			   t))

       ;; (colors (-map (fn (-reduce-from
       ;; 			  (lambda (acc new) (ns/color-pastel acc 0.93 1.09))
       ;; 			  "#2d249f"
       ;; 			  (range (+ 1 <>))))
       ;; 		     (range (length word))))

       )
  (ns/blog-make-color-strip colors (-map 'string word))
  )
#+end_SRC

In July 2020 I went on a colorscheme vision quest. This led to some research on various [[https://en.wikipedia.org/wiki/Color_space][color spaces]] and their utility, some investigation into the [[http://chriskempson.com/projects/base16/#styling-guidelines][styling guidelines]] outlined by the base16 project, and the [[https://github.com/emacs-mirror/emacs/blob/master/lisp/color.el][color utilities]] that ship within the GNU Emacs text editor. This article will be a whirlwind tour of things you can do to individual colors, and at the end how I put these blocks together.

** Motivation

I've been a part of several linux desktop customization communities since circa 2013. One big aspect of that is the colors used across various contexts -- for me, it follows that part of the game is trying to make a cohesive system of colors that relate to each other in an understandable (and thus tweakable) way.

I'm colorblind. This means I might be really picky about some colors. For example, I don't like the color red used for emphasis in text -- thin red lines look the same as thin black lines to me (and so, red text doesn't typically >POP< for me, unless it's bold or has some other emphasis included).

Bootstrapping builders exist for base16! If I can bootstrap on top of their system I get a lot of free coverage within the software ecosystem.

Plus, I just find this sort of thing really fun. Visual feedback is pleasing. Finding the right colors makes my lizard brain return to monke.

** Side note: The Canvas

This will be the focal point of inconsistency. The level of brightness, quality of screen, and ambient lighting level are all things that affect the value of the screen's [[https://en.wikipedia.org/wiki/White_point][white point]], which is what everything else is relative too. Luckily you can (attempt to) account for this as well.

** Color Spaces

Color spaces are ways of defining colors in different sets of properties. They are the main tool you will have for reasoning about tweaking /individual/ colors. You can then mess with these and convert them back into a format you can render (typically RGB) within a [[https://en.wikipedia.org/wiki/Gamut][color gamut]] (a range of supported colors). Here I will be pretty high level, focusing on some visuals for what sorts of things these properties look like.

TODO: link color resource section here

*** RGB

The one you know and love:  [R]ed, [G]reen, [B]lue. Your knobs are amounts of each. As you turn everything up, you approach {{{color(#ffffff)}}} (and down, -> {{{color(#000000)}}}). This isn't particularly flexible in "ways you can think about colors".

Here is a gradient from {{{color(#cc3333)}}} to {{{color(#33cc33)}}} to {{{color(#3333cc)}}}:

#+BEGIN_SRC elisp :results raw :exports results
(ns/blog-make-color-strip
 (append
  (ns/color-gradient 15 "#cc3333" "#33cc33" t)
  (cdr (ns/color-gradient 15 "#33cc33" "#3333cc" t))))
#+end_SRC

 To show the lighting effect, let's repeat the above gradient, but instead of using ~33~ for filler, we'll use ~99~ -- that's triple(!) the secondary color amounts:

#+BEGIN_SRC elisp :results raw :exports results
(ns/blog-make-color-strip
 (append
  (ns/color-gradient 15 "#cc9999" "#99cc99" t)
  (cdr (ns/color-gradient 15 "#99cc99" "#9999cc" t))))
#+end_SRC

*** HSL

[[https://en.wikipedia.org/wiki/HSL_and_HSV][wikipedia: HSL and HSV]]

| [H]ue        | 0-360 | Color "direction" |
| [S]aturation | 0-100 | Color "strength"  |
| [L]uminance  | 0-100 | Light level       |

Saturation in HSL is a controlled version of chromacity ("distance from gray"). See the wiki section for more details.

{{{image(color_cylinder.png)}}}

Hue has several defined points (at rotating 60° angles), I like to think of it like a color compass:

#+BEGIN_SRC elisp :results raw :exports results
(ns/blog-make-color-strip
 (-map 'ns/color-shorten
       (-reductions-from
	(lambda (acc new)
	  ;; list
	  (ns/color-hsl-transform acc
				  (lambda (H S L)
				    (list (+ 60 H) 50 50))))

	;; starting with 1% saturation (0% removes our hue entirely)
(ns/color-make-hsl 0 50 50)
	(range 5)))
 '("red, 0°"
   "yellow, 60°"
   "green, 120°"
   "cyan, 180°"
   "blue, 240°"
   "magenta, 300°"))
#+end_SRC
{{{detail(HSL: Hue rotation 0-360 (step 60°), saturation 50%, luminance 50%)}}}

Let's see the effect saturation has:

#+BEGIN_SRC elisp :results raw :exports results
(ns/blog-make-color-strip
 (-map 'ns/color-shorten
       (-reductions-from
	(lambda (acc new)
	  ;; list
	  (ns/color-hsl-transform acc
				  (lambda (H S L)
				    (list H
					  ;; correct for our starting position
					  (+ 10 (* 10 (first (cl-round S 10))))
					  L))))
	;; starting with 1% saturation (0% removes our hue entirely)
(ns/color-make-hsl 240 1 50)
	(range 10))))
#+end_SRC
{{{detail(HSL: saturation scale 0-100% (step 10%), luminance 50%, hue 240° (blue))}}}

And luminance:

#+BEGIN_SRC elisp :results raw :exports results
(ns/blog-make-color-strip
 (-map 'ns/color-shorten
       (-reductions-from
	(lambda (acc new)
	  ;; list
	  (ns/color-hsl-transform acc
				  (lambda (H S L)
				    (list H
					  S
					  ;; correct for our starting position
					  (+ 10 (* 10 (first (cl-round L 10))))))))
(ns/color-make-hsl 240 50 1)
	(range 10))))
#+end_SRC
{{{detail(HSL: luminance scale 0-100% (step 10%), saturation 50%, hue 240° (blue))}}}

*** HSLuv

[[https://www.hsluv.org/comparison/][hsluv]] is an altered version of HSL that tries to be perceptually uniform with regards to luminance. HSL luminance by comparison is hard to make contrast comparisons in.

What does that mean for us? Well, let's take our above examples and recreate them in the HSLuv space:

#+BEGIN_SRC elisp :results raw :exports results
(ns/blog-make-color-strip
 (-map 'ns/color-shorten
       (-reductions-from
	(lambda (acc new)
	  ;; list
	  (ns/color-hsluv-transform acc
				    (lambda (H S L)
				      (list (+ 60 H) 50 50))))

    (ns/color-make-hsluv 0 50 50)

	(range 5)))
 '("red, 0°"
   "yellow, 60°"
   "green, 120°"
   "cyan, 180°"
   "blue, 240°"
   "magenta, 300°"))
#+end_SRC
{{{detail(HSLuv: Hue rotation 0-360 (step 60°), saturation 50%, luminance 50%)}}}

Saturation:

#+BEGIN_SRC elisp :results raw :exports results
(ns/blog-make-color-strip
 (-map 'ns/color-shorten
       (-reductions-from
	(lambda (acc new)
	  ;; list
	  (ns/color-hsluv-transform acc
				  (lambda (H S L)
				    (list H
					  ;; correct for our starting position
					  (+ 10 (* 10 (first (cl-round S 10))))
					  L))))
	;; starting with 1% saturation (0% removes our hue entirely)
    (ns/color-make-hsluv 240 1 50)
	;; "#7e387e3880c5"
	(range 10))))
#+end_SRC
{{{detail(HSLuv: saturation scale 0-100% (step 10%), luminance 50%, hue 240° (blue))}}}

Luminance:

#+BEGIN_SRC elisp :results raw :exports results
(ns/blog-make-color-strip
 (-map 'ns/color-shorten
       (-reductions-from
	(lambda (acc new)
	  ;; list
	  (ns/color-hsluv-transform acc
				  (lambda (H S L)
				    (list H
					  S
					  ;; correct for our starting position
					  (+ 10 (* 10 (first (cl-round L 10))))))))
	;; starting with 1% luminance (0% removes our hue entirely)
    (ns/color-make-hsluv 240 50 1)
	(range 10))))
#+end_SRC
{{{detail(HSLuv: luminance scale 0-100% (step 10%), saturation 50%, hue 240° (blue))}}}


*** CIELAB

[[https://en.wikipedia.org/wiki/CIELAB_color_space][wikipedia link]]

| [L]uminance |    0-100 | Light level      |
| [A] toggle  | -100-100 | green <--> red   |
| [B] toggle  | -100-100 | blue <--> yellow |
| whitepoint  | coordinates [X, Y, Z] | a point in the [[https://en.wikipedia.org/wiki/CIE_1931_color_space][CIE XYZ]] space that defines "white" from the perspective of the image being displayed |

The white point is a defined [[https://en.wikipedia.org/wiki/Standard_illuminant][standard illuminate]]  not intrinsic to the value of a color. It is an additional piece of information you provide to functions when converting into and out of the CIELAB colorspace.

The standard white point is defined as ~d65~ -- in this section, every conversion will be made with ~d65~. Here is a table of commonly used white points and their meaning (for values, see the bottom of the wikipedia link).

| d65 | Noon Daylight: Television, sRGB color space (standard assumption) |
| d50 | Horizon Light. ICC profile PCS                                    |
| d55 | Mid-morning / Mid-afternoon Daylight                              |
| d75 | North sky Daylight                                                |

The knobs A and B allow you to play with the 4 primary colors of the LAB space. If you take a look at the values, you might notice that the more negative we go, we get "cooler" colors, while on the positive end, we get "warmer" colors.

Let's look at some LAB colors. The labels below will have the values of  ~(L A B)~ -- Remember, A is green to red, B is blue to yellow (each with a value -100 to 100)

#+BEGIN_SRC elisp :results raw :exports results
(s-join
 "\n"
 (-map (lambda (colors)
    (apply
     'ns/blog-make-color-strip
     (-unzip
      (-map
       (lambda (props)
	 (list
	  (apply 'ns/color-make-lab props)
	  (format "(%s, %s, %s)" (nth 0 props) (nth 1 props) (nth 2 props))))
       colors))))
  '(
    ((50 -80 0)
     (50 -60 0)
     (50 -40 0)
     (50 -20 0)
     (50 0 0))

    ((50 0 0)
     (50 20 0)
     (50 40 0)
     (50 60 0)
     (50 80 0)))))
#+end_SRC

#+BEGIN_SRC elisp :results raw :exports results
(s-join
 "\n"
 (-map (lambda (colors)
	 (apply
	  'ns/blog-make-color-strip
	  (-unzip
	   (-map
	    (lambda (props)
	      (list
	       (apply 'ns/color-make-lab props)
	       (format "(%s, %s, %s)" (nth 0 props) (nth 1 props) (nth 2 props))))
	    colors))))
       '(((50 0 -80)
	  (50 0 -60)
	  (50 0 -40)
	  (50 0 -20)
	  (50 0 0))

	 ((50 0 0)
	  (50 0 20)
	  (50 0 40)
	  (50 0 60)
	  (50 0 80)))))
#+end_SRC

#+BEGIN_SRC elisp :results raw :exports results
(s-join
 "\n"
 (-map (lambda (colors)
    (apply
     'ns/blog-make-color-strip
     (-unzip
      (-map
       (lambda (props)
	 (list
	  (apply 'ns/color-make-lab props)
	  (format "(%s, %s, %s)" (nth 0 props) (nth 1 props) (nth 2 props))))
       colors))))
  '(((50 -80 -80)
     (50 -60 -60)
     (50 -40 -40)
     (50 -20 -20)
     (50 0 0))

    ((50 0 0)
     (50 20 20)
     (50 40 40)
     (50 60 60)
     (50 80 80)))))
#+end_SRC

{{{detail(lab scales: -A -> +A, -B -> +B, {-A,-B} -> {+A,+B})}}}

*** LCH


LCH is a "cylindrical" version of cieLAB. What that means for us is that Hue is different. Instead of 6 defined islands to sail to with our color compass, there are 4:

#+BEGIN_SRC elisp :results raw :exports results
(ns/blog-make-color-strip
 (-map 'ns/color-shorten
       (-reductions-from
	(lambda (acc new)
	  ;; list
	  (ns/color-lch-transform acc
				  (lambda (L C H)
				    (list L C (+ 90 H)))))

	;; starting with 1% saturation (0% removes our hue entirely)
	(ns/color-make-lch 50 50 0)
	(range 5)))
 '("red, 0°"
   "yellow, 90°"
   "green, 180°"
   "blue, 270°"
   ))
#+end_SRC
{{{detail(lCH: Hue rotation 0-360 (step 90°), saturation 50%, luminance 50%)}}}



note the different hue here
chromacity, "distance from gray"

** Other stuff

*** Contrast

For text, the Web Content Assembly Guidelines (WCAG) recommend a 4.5:1 contrast ratio: [[https://www.w3.org/TR/WCAG/#contrast-minimum][link]]. I find I can get away with 2.2, but that's also in a light colorscheme context and down to personal preference/viewing conditions. Let's take a look at some different text contrasts! I will steal the backgrounds used here from the `base-16` grayscale sets: {{{color(#f7f7f7)}}} and {{{color(#101010)}}}. For reference, the contrast ratio between {{{color(#000000)}}} and {{{color(#ffffff}}} is 21.0

dark:

#+BEGIN_SRC elisp :results raw :exports results
(ns/blog-make-color-strip
 (-map 'ns/color-shorten
       (-reductions-from
	(lambda (acc new)
	  ;; list
	  (ns/color-tint-ratio acc "#101010" new)

	  ;; (ns/color-lch-transform acc
	  ;; 			  (lambda (L C H)
	  ;; 			    (list L C (+ 90 H))))
	  )

	;; starting with 1% saturation (0% removes our hue entirely)
	;; (ns/color-make-lch 50 50 0)
	"#101010"
	'(2.0 2.5 3.0 4.0 4.5)
	))

 (-map 'number-to-string '(2.0 2.5 3.0 4.0 4.5))
 )

#+end_src

#+BEGIN_SRC elisp :results raw :exports results
(ns/blog-make-color-strip
 (-map 'ns/color-shorten
       (-reductions-from
	(lambda (acc new)
	  ;; list
	  (ns/color-tint-ratio acc "#101010" new)

	  ;; (ns/color-lch-transform acc
	  ;; 			  (lambda (L C H)
	  ;; 			    (list L C (+ 90 H))))
	  )

	;; starting with 1% saturation (0% removes our hue entirely)
	;; (ns/color-make-lch 50 50 0)
	"#f7f7f7"
	'(2.0 2.5 3.0 4.0 4.5)
	))

 (-map 'number-to-string '(2.0 2.5 3.0 4.0 4.5))
 )

#+end_src




light:

*** TODO Distance

*** TODO Gradients
*** TODO Pastel
pastel definition
*** TODO Colorwheel rotations
talk about hue rotations, visualize some in different spaces
*** TODO white-point adjustment
cielab relative white point adjustment

** Implementing helpers
mention notice of emacs colors.el
how you built transformation colors and also reference the really helpful color notes

** Vision quest

> wants
Create a map of colors meant to be used for different purposes and emphasis:.....
list the properties here

> method
proceed to experiment a bunch within colorspaces used above -- note some things you've played with:
colorwheel rotations
complementary colors
contrast iteration
cielab distance with "pastel" effect for fading
color mixing to a certain distance
note color-iterate usage here and what this all looks like

> bootstrapping
find some relation between that and base16 standards and what you want:.....

note your tweaks specifically to the base16 stuff:

> profit:
use your base16 boostrap everywhere, but ALSO your colormap, as used in some properties of this site right now(link to colors.css)


** Vision quest







ARST: HERE DOWN IS OLD STUFF




In addition to the properties you can play with in color spaces


Think of color spaces as maps or frameworks for navigating some color range (usually called a [[https://en.wikipedia.org/wiki/Gamut][gamut]]) that are there to help you make sensible changes.

**** Some color spaces:

***** HSL
- Hue
- Saturation
- Luminance

**** Hue

My mental model of hue is to think of it like a "color compass", pointing in a direction whose strength may be tweaked by changing the saturation value. Here is an example of the same color with a changed hue (chose the reference values given with HSL):

HSL with .5 saturation and .5 luminance:

| hue (degrees) | border  | color                |
|---------------+---------+----------------------|
|             0 | red     | {{{color(#bf3f3f)}}} |
|            60 | yellow  | {{{color(#bfbf3f)}}} |
|           120 | green   | {{{color(#3fbf3f)}}} |
|           180 | cyan    | {{{color(#3fbfbf)}}} |
|           240 | blue    | {{{color(#3f3fbf)}}} |
|           300 | magenta | {{{color(#bf3fbf)}}} |
|           360 | red     | {{{color(#bf3f3f)}}} |

**** links and references:

- https://peteroupc.github.io/colorgen.html
- https://en.wikipedia.org/wiki/CIELAB_color_space
- https://en.wikipedia.org/wiki/Standard_illuminant#White_points_of_standard_illuminants
- http://colorizer.org/
- https://github.com/yurikhan/yk-color/blob/master/yk-color.el
- https://www.w3.org/TR/WCAG20/#relativeluminancedef
