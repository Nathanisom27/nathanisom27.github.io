#+title: adhoc executable patching on nixos

AKA 'one weird trick' for getting that ELF executable someone just handed you working soonâ„¢ (don't depend on this often)

Create a ~shell.nix~ file that looks like:

#+begin_src nix
let
  pkgs = import <nixpkgs> {};
in pkgs.mkShell {
  nativeBuildInputs =
    (with pkgs; [
      gcc

      # example libraries you might want:
      zlib
      SDL2
    ]);
}
#+end_src

Launch the nix-shell, patch the linker so you can call the executable and see what's up:

#+begin_src sh
$ nix-shell shell.nix
$ patchelf --set-interpreter "$(cat $NIX_CC/nix-support/dynamic-linker)" /path/to/executable
#+end_src

Strategies to find out what you might need:

#+begin_src sh
$ ldd /path/to/executable
$ strace /path/to/executable
#+end_src

Update the ~shell.nix~ file with the dependencies/linked libraries your executable might need, and then patch the executable from the derived nix-shell based on that:

#+begin_src sh
$ nix-shell ./shell.nix
$ # you may want to peek at new_rpath here or mangle NIX_LDFLAGS yourself
$ new_rpath=$(echo "$NIX_LDFLAGS" | tr ' ' $'\n' | grep "^-L" | sed -E 's/^-L/:/' | tr -d $'\n')
$ patchelf --set-rpath "$new_rpath" /path/to/executable
#+end_src

Then you should be able to run the executable by calling it.
